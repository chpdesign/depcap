<?namespace ComposerPack\System;use PDOStatement;/** * SQL osztály az sql kapcsolat fentartására. * @author Nagy Gergely info@nagygergely.eu * @version 0.6.1 */class Sql{	private static $servers = array();    /**     * @var \PDO     */	private $server = null;    /**     * @var PDOStatement     */	private $stmt = null;    /**     * @var int     */	private $rowCount = 0;	private $name;	private $host;	private $user;	private $pass;	private $database;    /**     * @var string     */	private static $defaultDb = null;	function __sleep()    {        return [];    }    private function __construct($server, $host, $user, $pass, $database, $name)	{		$this->server = $server;		$this->host = $host;		$this->user = $user;		$this->pass = $pass;		$this->database = $database;		$this->name = $name;	}	public static function connect($host, $user, $pass, $database, $name = null, $port = null)	{		if($port == null && strpos($host,':') === false)		{			$port = ini_get("mysqli.default_port");		}		else if(strpos($host,':') > 0)		{			$p = explode(":",$host);			$host = $p[0];			$port = $p[1];		}		$cls = get_called_class();		$name = ($name == null) ? md5($host.$user.$pass.$database) : $name;        /**         * @var \PDO         */        $con = new PDO("mysql:host=".$host.";port=".$port.";dbname=".$database.";charset=utf8", $user, $pass);        $con->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);		self::$servers[$name] = new $cls($con, $host, $user, $pass, $database, $name);		return self::$servers[$name];	}		public function getName()	{		return $this->name;	}    /**     * @return Sql     */	public static function getDefaultDb()	{		if(self::$defaultDb == null)			return reset(self::$servers);		else			return self::$servers[self::$defaultDb];	}	public static function setDefaultDb($name)	{		if(!is_string($name))		{			$name = array_search($name, self::$servers);		}		if($name !== false)		{			if(isset(self::$servers[$name]))				self::$defaultDb = $name;		}	}	public static function getDb($name)	{		if(isset(self::$servers[$name]))			return self::$servers[$name];		return null;	}	public static function check($host, $user, $pass, $database, $port = null)	{		if(empty($database)) return false;        if($port == null && strpos($host,':') === false)        {            $port = ini_get("mysqli.default_port");        }        else if(strpos($host,':') > 0)        {            $p = explode(":",$host);            $host = $p[0];            $port = $p[1];        }        $con = new \PDO("mysql:host=".$host.";port=".$port.";dbname=".$database.";charset=utf8", $user, $pass, [\PDO::MYSQL_ATTR_FOUND_ROWS => true, \PDO::ATTR_ERRMODE => \PDO::ERRMODE_EXCEPTION, \PDO::ATTR_EMULATE_PREPARES => false]);        //$con->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);		if($con != false)		{			$query = @$con->query("SHOW DATABASES;");			if($query != false)				return true;		}		return false;	}	public function version($trim = false)	{		$version = null;		if(!empty($this->server))		{			$version=$this->server->getAttribute(\PDO::ATTR_SERVER_INFO);			if($trim)			{				$version = explode('.', $version);				$version = intval($version[0]) * 10000 + intval($version[1]) * 100 + intval($version[2]);			}		}		return $version;	}	public function beginTransaction()    {        $this->server->beginTransaction();    }	public function commit()    {        $this->server->commit();    }	public function rollBack()    {        $this->server->rollBack();    }    public function setAutoCommit($autoCommit)    {        $this->server->setAttribute(\PDO::ATTR_AUTOCOMMIT, $autoCommit);    }    /**     * @param string $query     * @param array $params     * @return null|PDOStatement     */	public function query($query = '', $params = [])	{		$this->stmt = null;		if(!empty($query))		{			if(!empty($this->server))			{			    if(empty($params))                {                    $this->stmt = $this->server->query($query);                }                else                {                    $this->stmt = $this->server->prepare($query);                    foreach ($params as $_id => $param) {                        if (strpos($_id, ":") !== 0)                            $id = ":" . $_id;                        else                            $id = $_id;                        $this->stmt->bindValue($id, $param);                    }                    $this->stmt->execute();                }				$this->rowCount = $this->stmt->rowCount();			}		}		return $this->stmt;	}    /**     * @param string $query     * @param array $params     * @return null|PDOStatement     */	public function prepare($query = '', $params = [])	{		$this->stmt = null;		if(!empty($query))		{			if(!empty($this->server))			{                $this->stmt = $this->server->prepare($query);                foreach ($params as $_id => $param) {                    if (strpos($_id, ":") !== 0)                        $id = ":" . $_id;                    else                        $id = $_id;                    $this->stmt->bindValue($id, $param);                }				$this->rowCount = 0;			}		}		return $this->stmt;	}    /**     *     */	public function execute()    {        $args = func_get_args();        $stmt = $this->stmt;        $params = [];        if(count($args) == 2)        {            if(is_array($args[0]))            {                $params = $args[0];                $stmt = $args[1];            }            else if(is_array($args[1]))            {                $params = $args[1];                $stmt = $args[0];            }        }        elseif(count($args) == 1)        {            if(is_array($args[0]))            {                $params = $args[0];                $stmt = $this->stmt;            }            else            {                $stmt = $args[0];                if(is_string($stmt))                    $stmt = $this->server->prepare($stmt);                $params = [];            }        }        foreach ($params as $_id => $param) {            if (strpos($_id, ":") !== 0)                $id = ":" . $_id;            else                $id = $_id;            $stmt->bindValue($id, $param);        }        $stmt->execute($params);        return $stmt;    }	public function id()	{		$i = $this->server->lastInsertId();		return $i;	}		public function nullable($table,$column = null)	{		$query = $this->query("SELECT column_name, is_nullable, column_default FROM information_schema.columns WHERE table_name = '".$table."'".($column != null ? " AND column_name = '".$column."'" : ""));		if(is_null($column))		{			$columns = array();			while($data = $this->fetch_assoc($query))			{				$columns[$data['column_name']] = $data['is_nullable'] === "YES" ? true : $data['column_default'];			}			return $columns;		}		else		{			$data = $this->fetch_assoc($query);			$defaultValue = $data['column_default'];			if(startsWith($defaultValue, "'") && endsWith($defaultValue, "'"))            {                $defaultValue = substr($defaultValue, 1, -1);            }			return $data['is_nullable'] === "YES" ? true : $defaultValue;		}	}	public function defaultValue($table,$column = null)	{		$query = $this->query("SELECT column_name, column_default FROM information_schema.columns WHERE table_name = '".$table."'".($column != null ? " AND column_name = '".$column."'" : ""));		if($column == null)		{			$columns = array();			while($data = $this->fetch_assoc($query))			{				$columns[$data['column_name']] = $data['column_default'];			}			return $columns;		}		else		{			$data = $this->fetch_assoc($query);			return $data['column_default'];		}	}	public function table_exists($table)	{		if(!empty($table) && is_string($table))		{			$num = $this->rowCount("SHOW TABLES LIKE '".$table."'");			return $num == 1;		}		return false;	}	public function column_exists($table,$column)	{		if( !empty($table) && is_string($table) && !empty($column) && is_string($column) )		{			return $this->rowCount("SHOW COLUMNS FROM `".$table."` LIKE '".$column."'") == 1;		}		return false;	}	public function is_auto_increment($table,$column)	{		if( !empty($table) && is_string($table) && !empty($column) && is_string($column) )		{			return $this->rowCount("SHOW COLUMNS FROM `".$table."` WHERE `Extra` LIKE '%auto_increment%' AND `Field` = '".$column."'") == 1;		}		return false;	}		public function get_column_default_value($table,$column)	{		if( !empty($table) && is_string($table) && !empty($column) && is_string($column) )		{			return $this->fetch_assoc($this->query("SHOW COLUMNS FROM `".$table."` WHERE `Field` = '".$column."'"))['Default'];		}		return false;	}		public function auto_increment($table)	{		if( !empty($table) && is_string($table) )		{			return $this->fetch_assoc($this->query("SHOW TABLE STATUS LIKE '".$table."'"))['Auto_increment'];		}		return false;	}	public function is_primary_key($table,$column)	{		if( !empty($table) && is_string($table) && !empty($column) && is_string($column) )		{			return $this->rowCount("SHOW COLUMNS FROM `".$table."` WHERE `Key` = 'PRI' AND `Field` = '".$column."'") == 1;		}		return false;	}	public function get_enum_values($table, $field)	{		$enum = array();		$type = $this->fetch_assoc($this->query("SHOW COLUMNS FROM {$table} WHERE Field = '{$field}'"));		$type = $type['Type'];		preg_match('/^enum\((.*)\)$/', $type, $matches);		foreach( explode(',', $matches[1]) as $value )		{			$enum[] = trim( $value, "'" );		}		return $enum;	}	public function foreign_keys($table)	{		if(!empty($table) && is_string($table))		{			$result = $this->query("				SELECT				    `column_name`,				    `referenced_table_schema` AS foreign_db,				    `referenced_table_name` AS foreign_table,				    `referenced_column_name`  AS foreign_column				FROM				    `information_schema`.`KEY_COLUMN_USAGE`				WHERE				    `constraint_schema` = SCHEMA()				AND				    `table_name` = '".$table."'				AND				    `referenced_column_name` IS NOT NULL				ORDER BY				    `column_name`			");			$info = array();			while($row = $this->fetch_array($result))			{				$info[$row['column_name']] = array('database' => $row['foreign_db'] , 'table' => $row['foreign_table'] , 'column' => $row['foreign_column']);			}			return $info;		}		return false;	}		public function table_foreign_keys($table)	{		if(!empty($table) && is_string($table))		{			$q = "				SELECT					i.TABLE_NAME,					i.CONSTRAINT_TYPE,					i.CONSTRAINT_NAME,					k.REFERENCED_TABLE_NAME,					k.REFERENCED_COLUMN_NAME,					k.COLUMN_NAME,                    k.TABLE_SCHEMA				FROM					information_schema.TABLE_CONSTRAINTS i 				LEFT JOIN					information_schema.KEY_COLUMN_USAGE k				ON					i.CONSTRAINT_NAME = k.CONSTRAINT_NAME 				WHERE					i.CONSTRAINT_TYPE = 'FOREIGN KEY'					AND i.TABLE_NAME = '".$table."'					AND k.TABLE_SCHEMA = SCHEMA()			";			$result = $this->query($q);			$info = array();			if($result)			while($row = $this->fetch_array($result))			{				$info[$row['COLUMN_NAME']] = array('database' => $row['TABLE_SCHEMA'] , 'table' => $row['REFERENCED_TABLE_NAME'] , 'column' => $row['REFERENCED_COLUMN_NAME']);			}			return $info;		}		return false;	}		public function primary_key($table,$withinfo = false)	{		if(!empty($table) && is_string($table))		{			//$result = $this->query("SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '".$table."' AND `COLUMN_KEY` LIKE '%PRI%' AND TABLE_SCHEMA = SCHEMA()");			$result = $this->query("SHOW FULL COLUMNS FROM `".$table."` WHERE `Key` LIKE '%PRI%'");			$info = array();			while($row = $this->fetch_array($result))			{				if($withinfo == true)					$info[$row['Field']] = $row;				else					$info[$row['Field']] = $row['Field'];			}			return $info;		}		return false;	}	public function columns($table, $withinfo = false)	{				$result = $this->query("SHOW TABLES LIKE '$table'");		$tableExists = $result && $this->rowCount($result) > 0;		if($tableExists)		{			if(!empty($table) && is_string($table))			{				//$query = "SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '".$table."' AND TABLE_SCHEMA = SCHEMA()";				$query = "SHOW FULL COLUMNS FROM `".$table."`";				$result = $this->query($query);				$info = array();				while($row = $this->fetch_array($result))				{					if($withinfo == true)						$info[$row['Field']] = $row;					else						$info[$row['Field']] = $row['Field'];				}				return $info;			}		}		return [];	}		public function engines()	{		$engines = array();		while($engine = $this->fetch_assoc($this->query("SHOW ENGINES")))		{			$engines[$engine['Engine']] = $engine;		}		return $engines;	}	/**	 * SQL generate	 * @param array $__sql_select	 * @return string	 */	public static function __sql(	    $__sql_select = [			'SELECT' => null,			'FROM' => null,			'WHERE' => null,			'ORDER BY' => null,			'GROUP BY' => null,			'LIMIT' => null,	    ]    )	{        $__sql = array();        // SELECT -------------------------------------------------------------------        if(empty($__sql_select['SELECT']))            $__sql_select['SELECT'] = '*';        if(is_string($__sql_select['SELECT']) && !strncmp($__sql_select['SELECT'], 'DELETE', strlen('DELETE')))            $__sql[] = 'DELETE ';        else            if(is_string($__sql_select['SELECT']))                $__sql[] = 'SELECT '.$__sql_select['SELECT'];            else                if(is_array($__sql_select['SELECT'])) {                    if(self::is_assoc_array($__sql_select['SELECT']))                    {                        $cols = [];                        foreach($__sql_select['SELECT'] as $as => $column)                        {                            $cols[] = ''.$column . ' AS ' . $as . '';                        }                        $__sql[] = 'SELECT ' . implode(', ', $cols); //implode_with_key($__sql_select['SELECT'], ' AS ', ', ');                    }                    else                    {                        $__sql[] = 'SELECT ' . implode(', ', $__sql_select['SELECT']);                    }                }        // FROM ---------------------------------------------------------------------        if(is_string($__sql_select['FROM']))            $__sql[] ='FROM '.$__sql_select['FROM'];        elseif(is_array($__sql_select['FROM']))            $__sql[] ='FROM '.implode(" \n ",$__sql_select['FROM']);        // WHERE --------------------------------------------------------------------        if(!empty($__sql_select['WHERE']))        {            if(is_string($__sql_select['WHERE']))                $__sql[] = 'WHERE '.$__sql_select['WHERE'];            if(is_array($__sql_select['WHERE']))                $__sql[] = 'WHERE '.implode(' AND ', $__sql_select['WHERE']);        }        // ORDER BY -----------------------------------------------------------------        if(!empty($__sql_select['ORDER BY']))            if(is_string($__sql_select['ORDER BY']))                $__sql[] = 'ORDER BY '.$__sql_select['ORDER BY'];            else                if(is_array($__sql_select['ORDER BY']))                    $__sql[] = 'ORDER BY '.implode(', ',$__sql_select['ORDER BY']);        // GROUP BY -----------------------------------------------------------------        if(!empty($__sql_select['GROUP BY']))            if(is_string($__sql_select['GROUP BY']))                $__sql[] = 'GROUP BY '.$__sql_select['GROUP BY'];            else                if(is_array($__sql_select['GROUP BY']))                    $__sql[] = 'GROUP BY '.implode(', ',$__sql_select['GROUP BY']);        // LIMIT --------------------------------------------------------------------        if(!empty($__sql_select['LIMIT']))            $__sql[] = ' '.$__sql_select['LIMIT'];        return implode(" \n ", $__sql);	}    public static function is_assoc_array($array){        $bla = ARRAY_KEYS($array);        $bla = ARRAY_SHIFT($bla);        if(IS_ARRAY($array) && !IS_NUMERIC($bla)){            return true;        }        return false;    }    /**     * @param PDOStatement $stmt     * @return array|bool|null     */	public function fetch_array($stmt = null)	{        if(is_string($stmt))        {            $stmt = $this->query($stmt);        }		if($stmt != null)		{            return $stmt->fetch(\PDO::FETCH_BOTH);		}		elseif($this->stmt == null)		{			return false;		}		else		{			return $this->stmt->fetch(\PDO::FETCH_BOTH);		}	}    /**     * @param PDOStatement $stmt     * @return bool|mixed     */	public function fetch_assoc($stmt = null)	{        if(is_string($stmt))        {            $stmt = $this->query($stmt);        }        if($stmt != null)        {            return $stmt->fetch(\PDO::FETCH_ASSOC);        }        elseif($this->stmt == null)        {            return false;        }        else        {            return $this->stmt->fetch(\PDO::FETCH_ASSOC);        }	}    /**     * @param PDOStatement $stmt     * @return bool|mixed     */	public function affected_rows($stmt = null, $params = [])	{	    if(is_string($stmt))        {            $stmt = $this->query($stmt, $params);        }        if($stmt != null)        {            return $stmt->fetch(\PDO::FETCH_ASSOC);        }        elseif($this->stmt == null)        {            return false;        }        else        {            return $this->stmt->fetch(\PDO::FETCH_ASSOC);        }	}	public function real_escape_string($string = '')	{		if(!can_be_string($string))		{			throw new \Exception("Value is not can be string!");		}		 return $string;//$this->server->quote($string);	}	public function rowCount($query = null, $params = [])	{        if(!empty($query))        {            if(!($query instanceof PDOStatement))            {                if(empty($params))                {                    $stmt = $this->server->query($query);                }                else                {                    $stmt = $this->server->prepare($query);                    foreach ($params as $_id => $param) {                        if (strpos($_id, ":") !== 0)                            $id = ":" . $_id;                        else                            $id = $_id;                        $stmt->bindValue($id, $param);                    }                }            }            else            {                $stmt = $query;            }            return $stmt->rowCount();        }        else        {            return $this->rowCount;        }	}	public static function paramsToWhere(&$params, &$where, $prefix = '', $clear = true)    {        $p = [];        foreach ($params as $key => $value)        {            $where[$key] = ':'.$prefix.$key;            $p[$prefix.$key] = $value;        }        if($clear !== false)        {            $params = $p;        }        else        {            $params = array_merge($params, $p);        }    }    /**     * @param PDOStatement $stmt     * @return bool     */	public function free(PDOStatement $stmt = null)	{		if($stmt != null)		{            $stmt->closeCursor();		}		elseif($this->stmt == null)		{			return false;		}		else		{			$this->stmt->closeCursor();		}	}}